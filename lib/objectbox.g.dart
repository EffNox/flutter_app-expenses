// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'providers/entities/db_features.dart';
import 'providers/entities/entity_expenses.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4005496045789444867),
      name: 'DBFeatures',
      lastPropertyId: const IdUid(4, 4942464880751694496),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6512458607799664457),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2280172264309849267),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4107050901175585082),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4942464880751694496),
            name: 'icon',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8090435495109105106),
      name: 'EntityExpense',
      lastPropertyId: const IdUid(7, 5783441490621469750),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1008871467659402594),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2339721034100110736),
            name: 'link',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4450598552844758694),
            name: 'year',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2876181841200172747),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2447458704180075738),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2636845467372102767),
            name: 'comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5783441490621469750),
            name: 'expense',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 7531975853456025713),
      name: 'EntityEntry',
      lastPropertyId: const IdUid(7, 1592015197111761253),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8808512554300355885),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 6921388494940409597),
            name: 'year',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1988273764954877647),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7698952938650532605),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7203450013204551250),
            name: 'comment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1592015197111761253),
            name: 'entry',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 7531975853456025713),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5619655794927087488],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        7357148700612606803,
        8190033228891953427,
        7341627563228976714,
        7615435996601429085,
        8789112185250415400,
        606404055968951894,
        7253369420824747722,
        4192729366626201252,
        2265465448030625796
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    DBFeatures: EntityDefinition<DBFeatures>(
        model: _entities[0],
        toOneRelations: (DBFeatures object) => [],
        toManyRelations: (DBFeatures object) => {},
        getId: (DBFeatures object) => object.id,
        setId: (DBFeatures object, int id) {
          object.id = id;
        },
        objectToFB: (DBFeatures object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final colorOffset = fbb.writeString(object.color);
          final iconOffset = fbb.writeString(object.icon);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.addOffset(2, colorOffset);
          fbb.addOffset(3, iconOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DBFeatures(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              category: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              color: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              icon: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    EntityExpense: EntityDefinition<EntityExpense>(
        model: _entities[1],
        toOneRelations: (EntityExpense object) => [],
        toManyRelations: (EntityExpense object) => {},
        getId: (EntityExpense object) => object.id,
        setId: (EntityExpense object, int id) {
          object.id = id;
        },
        objectToFB: (EntityExpense object, fb.Builder fbb) {
          final commentOffset = fbb.writeString(object.comment);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.link);
          fbb.addInt64(2, object.year);
          fbb.addInt64(3, object.month);
          fbb.addInt64(4, object.day);
          fbb.addOffset(5, commentOffset);
          fbb.addFloat64(6, object.expense);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EntityExpense(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              link: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              month:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              expense: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 16, 0));

          return object;
        }),
    EntityEntry: EntityDefinition<EntityEntry>(
        model: _entities[2],
        toOneRelations: (EntityEntry object) => [],
        toManyRelations: (EntityEntry object) => {},
        getId: (EntityEntry object) => object.id,
        setId: (EntityEntry object, int id) {
          object.id = id;
        },
        objectToFB: (EntityEntry object, fb.Builder fbb) {
          final commentOffset = fbb.writeString(object.comment);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.year);
          fbb.addInt64(3, object.month);
          fbb.addInt64(4, object.day);
          fbb.addOffset(5, commentOffset);
          fbb.addFloat64(6, object.entry);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EntityEntry(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              month:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              comment: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              entry: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 16, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [DBFeatures] entity fields to define ObjectBox queries.
class DBFeatures_ {
  /// see [DBFeatures.id]
  static final id =
      QueryIntegerProperty<DBFeatures>(_entities[0].properties[0]);

  /// see [DBFeatures.category]
  static final category =
      QueryStringProperty<DBFeatures>(_entities[0].properties[1]);

  /// see [DBFeatures.color]
  static final color =
      QueryStringProperty<DBFeatures>(_entities[0].properties[2]);

  /// see [DBFeatures.icon]
  static final icon =
      QueryStringProperty<DBFeatures>(_entities[0].properties[3]);
}

/// [EntityExpense] entity fields to define ObjectBox queries.
class EntityExpense_ {
  /// see [EntityExpense.id]
  static final id =
      QueryIntegerProperty<EntityExpense>(_entities[1].properties[0]);

  /// see [EntityExpense.link]
  static final link =
      QueryIntegerProperty<EntityExpense>(_entities[1].properties[1]);

  /// see [EntityExpense.year]
  static final year =
      QueryIntegerProperty<EntityExpense>(_entities[1].properties[2]);

  /// see [EntityExpense.month]
  static final month =
      QueryIntegerProperty<EntityExpense>(_entities[1].properties[3]);

  /// see [EntityExpense.day]
  static final day =
      QueryIntegerProperty<EntityExpense>(_entities[1].properties[4]);

  /// see [EntityExpense.comment]
  static final comment =
      QueryStringProperty<EntityExpense>(_entities[1].properties[5]);

  /// see [EntityExpense.expense]
  static final expense =
      QueryDoubleProperty<EntityExpense>(_entities[1].properties[6]);
}

/// [EntityEntry] entity fields to define ObjectBox queries.
class EntityEntry_ {
  /// see [EntityEntry.id]
  static final id =
      QueryIntegerProperty<EntityEntry>(_entities[2].properties[0]);

  /// see [EntityEntry.year]
  static final year =
      QueryIntegerProperty<EntityEntry>(_entities[2].properties[1]);

  /// see [EntityEntry.month]
  static final month =
      QueryIntegerProperty<EntityEntry>(_entities[2].properties[2]);

  /// see [EntityEntry.day]
  static final day =
      QueryIntegerProperty<EntityEntry>(_entities[2].properties[3]);

  /// see [EntityEntry.comment]
  static final comment =
      QueryStringProperty<EntityEntry>(_entities[2].properties[4]);

  /// see [EntityEntry.entry]
  static final entry =
      QueryDoubleProperty<EntityEntry>(_entities[2].properties[5]);
}
